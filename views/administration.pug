doctype html
html
  head
    title= preferences.site_title
    link(rel='stylesheet', href='/css/styles.css')
    link(rel='stylesheet', href='/css/newsfeed_styles.css')
    link(rel='stylesheet', href='/css/timer_styles.css')
    link(rel='stylesheet', href='/css/numbers_styles.css')
    link(rel='stylesheet', href='/css/subtimer_styles.css')
    link(rel='stylesheet', href='https://fonts.googleapis.com/css2?family=Rubik+Mono+One&display=swap')
    meta(name='viewport', content='width=device-width, initial-scale=1.0')
    script(src='https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js')
    script(src="https://cdn.jsdelivr.net/npm/luxon@3.5.0/build/global/luxon.min.js")
    
    link(href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0", rel="stylesheet")
    script. 
      const dash_id = "#{dash_id}";
      const preferences = !{prefsobj};

    if (dash_id)
      // Dashboard specific styling
      link(rel='stylesheet', href=`/css/${dash_id}_styles.css`)

    script(src='/scripts/admin.js')
  body
    - const header_bool = safeJSONParse(preferences.header_visible, true);
    - const settings_bool = safeJSONParse(preferences.settings_visible, false);
    - const qrcode_bool = safeJSONParse(preferences.qrcode_visible, false);
    - const numbers_bool = safeJSONParse(preferences.numbers_show_difference, false)
      header#header(style={display:header_bool ? "block" : "none"})
        div#title_and_logo 
          div
            h1#title= preferences.header_title
            if preferences.header_subtitle
              h2#subtitle= preferences.header_subtitle
          if preferences.logo_path
            img#logo(src=preferences.logo_path, alt=preferences.logo_alt style="width:100px;padding:10px;")

      h3#subsubtitle Administration Panel
      div#content
        div#viewcontrol
          span#tab_a.tabbtn(class="clicked", onclick="switchTab('a')")= (preferences.slot_a.charAt(0).toUpperCase()+preferences.slot_a.slice(1)) 
          span#tab_b.tabbtn(onclick="switchTab('b')")= (preferences.slot_b.charAt(0).toUpperCase()+preferences.slot_b.slice(1)) 
        div(id=preferences.slot_a, class="slot slot_a")
        div(id=preferences.slot_b, class="slot slot_b")
      footer#homebutton
        span(class="material-symbols-outlined big", onclick="window.location='/'", title="Back to main page") home
        span(class="material-symbols-outlined big", onclick="window.location='./'", title="Back to public view") exit_to_app
        span(class="material-symbols-outlined big", onclick="dashboard_settings.show('"+dash_id+"')", title="Edit dashboard settings") display_settings
      div.modal#prefsmodal
        div.modal_tabs

        div.modal-content
          h3 Dashboard Settings 
          div 
            span.modal_tab(class="selected_prefs", onclick="changePrefsTab(event)") General
            span.modal_tab(onclick="changePrefsTab(event)") Numbers 
            span.modal_tab(onclick="changePrefsTab(event)") Audio
            span.modal_tab(onclick="changePrefsTab(event)") Subtimer
            span.modal_tab(onclick="changePrefsTab(event)") Styling
            p For details on using the dashboard and specific modules, see the 
              a(href="https://github.com/cbodnaruk/megagame-dashboard/wiki") documentation.
          div#modal_tab_General.modal_tab_content
            p 
              label(for="p_header_visible") Show Header: 
              input(id="p_header_visible", type="checkbox", value=preferences.header_visible, onChange="dashboard_settings.update(event)", checked=header_bool)
              span NB: only affects public view, not admin panel
            p 
              label(for="p_settings_visible") Show Admin Panel Button: 
              input(id="p_settings_visible", type="checkbox", value=preferences.settings_visible, onChange="dashboard_settings.update(event)", checked=settings_bool)
            p 
              label(for="p_site_title") Tab Title: 
              input(id="p_site_title", value=preferences.site_title, onChange="dashboard_settings.update(event)")
            p 
              label(for="p_header_title") Header: 
              input(id="p_header_title", value=preferences.header_title, onChange="dashboard_settings.update(event)")         
            p 
              label(for="p_header_subtitle") Subheader: 
              input(id="p_header_subtitle", value=preferences.header_subtitle, onChange="dashboard_settings.update(event)")
            p 
              label(for="p_slot_a") Content Slot A (left): 
              select(id="p_slot_a", onChange="dashboard_settings.update(event)")
                option(value="timer", selected=(preferences.slot_a == "timer")) Timer
                option(value="newsfeed", selected=(preferences.slot_a == "newsfeed")) Newsfeed
                option(value="numbers", selected=(preferences.slot_a == "numbers")) Numbers
                option(value="subtimer", selected=(preferences.slot_a == "subtimer")) Subtimer
                option(value="", selected=(preferences.slot_a == "")) None
            p 
              label(for="p_slot_b") Content Slot B (right): 
              select(id="p_slot_b", onChange="dashboard_settings.update(event)")
                option(value="timer", selected=(preferences.slot_b == "timer")) Timer
                option(value="newsfeed", selected=(preferences.slot_b == "newsfeed")) Newsfeed
                option(value="numbers", selected=(preferences.slot_b == "numbers")) Numbers
                option(value="subtimer", selected=(preferences.slot_b == "subtimer")) Subtimer
                option(value="", selected=(preferences.slot_a == "")) None
            p 
              label(for="p_qrcode_visible") Show QR Code: 
              input(id="p_qrcode_visible", type="checkbox", value=preferences.qrcode_visible, onChange="dashboard_settings.update(event)", checked=qrcode_bool)             
            p 
              label(for="p_qrcode_size") QR Code size:
              input(id="p_qrcode_size", type="number", value=preferences.qrcode_size, onChange="dashboard_settings.update(event)")

            p 
              label(for="p_qrcode_lightColour") QR Code light colour: 
              input(id="p_qrcode_lightColour", type="color", value=preferences.qrcode_lightColour, onChange="dashboard_settings.update(event)")
          
            p 
              label(for="p_qrcode_darkColour") QR Code dark colour: 
              input(id="p_qrcode_darkColour", type="color", value=preferences.qrcode_darkColour, onChange="dashboard_settings.update(event)")
          div#modal_tab_Numbers.modal_tab_content(style="display: none;")
            p 
              label(for="p_numbers_show_difference") (For Numbers module) Show difference between current and previous number: 
              input(id="p_numbers_show_difference", type="checkbox", value=preferences.numbers_show_difference, onChange="dashboard_settings.update(event)", checked=numbers_bool)
          div#modal_tab_Audio.modal_tab_content(style="display: none;")
          div#modal_tab_Styling.modal_tab_content(style="display: none;")
            p This tab is currently non-functional
            textarea#styling_input(rows=20, cols=100, onblur="cssUpdate()")
          div#modal_tab_Subtimer.modal_tab_content(style="display: none;")
            p 
              label(for="p_subtimer_start_text") Subtimer Start Text: 
              input(id="p_subtimer_start_text", value=preferences.subtimer_start_text, onChange="dashboard_settings.update(event)")
            p 
              label(for="p_subtimer_title") Heading Text (while running): 
              input(id="p_subtimer_title", value=preferences.subtimer_title, onChange="dashboard_settings.update(event)")
            p 
              label(for="p_subtimer_time") Time (in seconds): 
              input(id="p_subtimer_time", value=preferences.subtimer_time, onChange="dashboard_settings.update(event)")
            p 
              label(for="p_subtimer_pass_fail") Pass/Fail: 
              input(id="p_subtimer_pass_fail", type="checkbox", value=preferences.subtimer_pass_fail, onChange="dashboard_settings.update(event)", checked=safeJSONParse(preferences.subtimer_pass_fail,false))
            if preferences.subtimer_pass_fail
              p 
                label(for="p_subtimer_pass_audio") Audio on Pass: 
                input(id="p_subtimer_pass_audio", value=preferences.subtimer_pass_audio, onChange="dashboard_settings.update(event)")
              p 
                label(for="p_subtimer_fail_audio") Audio on Fail: 
                input(id="p_subtimer_fail_audio", value=preferences.subtimer_fail_audio, onChange="dashboard_settings.update(event)")
            else 
              p 
                label(for="p_subtimer_fail_audio") Audio on Timeout (or stop): 
                input(id="p_subtimer_fail_audio", value=preferences.subtimer_fail_audio, onChange="dashboard_settings.update(event)")